package com.group8.ruins_of_light;

import java.util.Collection;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.atomic.AtomicLong;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.group8.ruins_of_light.Record;

@RestController
@RequestMapping("/records")

public class Controller {

	// private int records[]=new int[5];
	private List<Record> records = new ArrayList<Record>();

	@GetMapping("/")
	public boolean records() {
		return true;
	}

	@PostMapping("/")
	@ResponseStatus(HttpStatus.CREATED)
	public int nuevoRecord(@RequestBody Record record) {
		System.out.println( record.toString());
		/*records.add(new Record(p1,p2,score));*/
		
		return 1;
	}

	/*@PutMapping("/{id}")
	public ResponseEntity<Record> actulizaRecord(@PathVariable long id, @RequestBody Record recordActualizado) {

		Record record;

		if (record != null) {

			recordActualizado.SetId(id);
			// records.put(id, recordActualizado);

			return new ResponseEntity<>(recordActualizado, HttpStatus.OK);
		} else {
			return new ResponseEntity<>(HttpStatus.NOT_FOUND);
		}
		
		return new ResponseEntity<>(HttpStatus.NOT_FOUND);
	}*/

	/*@GetMapping("/{id}")
	public ResponseEntity<Record> getRecord(@PathVariable long id) {

		Record record; // = records.get(id);

		if (record != null) {
			return new ResponseEntity<>(record, HttpStatus.OK);
		} else {
			return new ResponseEntity<>(HttpStatus.NOT_FOUND);
		}
		
		return new ResponseEntity<>(HttpStatus.NOT_FOUND);
	}*/

//	  @DeleteMapping("/{id}") public ResponseEntity<Record>
//	  borraRecord(@PathVariable long id) {
//	  
//	  Record record = records.remove(id);
//	  
//	  if (record != null) { return new ResponseEntity<>(record, HttpStatus.OK); }
//	  else { return new ResponseEntity<>(HttpStatus.NOT_FOUND); } }
//	 
}
